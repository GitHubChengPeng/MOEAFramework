name: Tests

on:
  push:
  workflow_dispatch:
    inputs:
      all-tests:
        type: choice
        required: true
        description: Include IgnoreOnCI tests
        options:
          - 'false'
          - 'true'
        default: 'false'
      java-distribution:
        type: choice
        required: true
        description: Java distribution
        options:
          - 'zulu'
          - 'temurin'
          - 'oracle'
        default: 'zulu'
      java-version:
        type: choice
        required: true
        description: Java version
        options:
          - '17'
          - '18'
          - '19'
          - '20'
          - '21'
          - '22'
        default: '17'
      macos-version:
        type: choice
        required: true
        description: MacOS version
        options:
          - '12'
          - '13'
          - '14'
        default: '13'
        
env:
  ALL_TESTS: ${{ inputs.all-tests || 'false' }}

jobs:
  ant-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        java: [ 17, 18, 19, 20, 21 ]
        include:
          - os: windows-latest
            java: 21
          - os: macos-${{ inputs.macos-version || '13' }}
            java: 21
    steps:
    - name: Setup build
      uses: MOEAFramework/.github/actions/setup-build@main
      with:
        java-version: ${{ matrix.java }}
        java-distribution: ${{ inputs.java-distribution }}
        setup-matlab: true
        setup-python: true
        python-dependencies: pandas
    - name: Download Java test dependencies
      uses: MOEAFramework/.github/actions/run-ant@main
      with:
        file: test.xml
        target: download-all
    - name: Set up Coco Framework (Linux)
      if: runner.os == 'Linux'
      run: test/setup-coco.sh
    - name: Run Ant tests
      uses: MOEAFramework/.github/actions/run-ant@main
      with:
        file: test.xml
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ant-test-results-${{ matrix.os }}-${{ matrix.java }}
        path: test-results     

  maven-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Setup build
      uses: MOEAFramework/.github/actions/setup-build@main
      with:
        java-version: ${{ inputs.java-version || '19' }}
        java-distribution: ${{ inputs.java-distribution }}
        setup-matlab: true
        setup-python: true
        python-dependencies: pandas
    - name: Prepare Maven project
      uses: MOEAFramework/.github/actions/run-ant@main
      with:
        target: build-maven
    - name: Run Maven tests
      run: |
        cd build
        mvn test
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: maven-test-results-ubuntu-${{ env.MIN_JAVA_VERSION }}
        path: build/target/surefire-reports

  content-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Setup build
      uses: MOEAFramework/.github/actions/setup-build@main
      with:
        java-version: ${{ inputs.java-version }}
        java-distribution: ${{ inputs.java-distribution }}
    - name: Validate docs
      uses: MOEAFramework/.github/actions/run-ant@main
      with:
        target: validate-docs
    - name: Validate links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        folder-path: docs/
        file-path: README.md
    - name: Run Checkstyle
      uses: MOEAFramework/.github/actions/run-ant@main
      with:
        directory: test/checkstyle
        target: check-style
        warning: Checkstyle identified one ore more violations, see logs for details!
    - name: Setup website
      uses: MOEAFramework/.github/actions/run-ant@main
      with:
        target: package-website
    - name: Build website with Jekyll
      run: |
        cd build
        sudo gem install bundler jekyll
        sudo bundle install
        bundle exec jekyll build
    - name: Upload website
      uses: actions/upload-artifact@v4
      with:
        name: Website
        path: build/_site

  example-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: macos-${{ inputs.macos-version || '13' }}
    steps:
    - name: Setup build
      uses: MOEAFramework/.github/actions/setup-build@main
      with:
        java-version: ${{ inputs.java-version }}
        java-distribution: ${{ inputs.java-distribution }}
    - name: Package binary
      uses: MOEAFramework/.github/actions/run-ant@main
      with:
        target: package-binary
    - name: Compiler info
      run: gcc --version
    - name: Test examples
      shell: bash
      run: |
        cd build/MOEAFramework-*
        CLASSPATH="lib/*${{ runner.os == 'Windows' && ';' || ':' }}examples"

        # Locate all examples with a main method, ignoring those requiring a display
        find examples -type f -name '*.java' | \
          xargs -r grep -l 'public static void main(' | \
          sort | \
          grep -v -e 'Example2.java' -e 'A280Example.java' -e 'PR76Example.java' \
            -e 'QuarticExample.java' -e 'QuinticExample.java' -e 'SexticExample.java' \
            -e 'PlotRuntimeDynamics.java' -e 'RuntimeViewerExample.java' -e 'PlotControlMap.java' \
            -e 'CompareIslandModelAndSerialExample.java' | \
          xargs -rt -I "{}" java -classpath "${CLASSPATH}" "{}"
    - name: Test solve.sh
      if: runner.os == 'Linux'
      run: examples/org/moeaframework/examples/experiment/solve.sh
    - name: Test sensitivity.sh
      if: runner.os == 'Linux'
      run: examples/org/moeaframework/examples/experiment/sensitivity.sh
